openapi: 3.0.0
servers:
  - description: 42 MANITO API DEV SERVER
    url: 'https://api.dev.42manito.com/'
  - description: 42 MANITO API SERVER
    url: 'https://api.42manito.com/'
  - description: 42 MANITO API LOCAL TEST
    url: 'http://localhost:3000'

info:
  version: '1.0.0'
  title: 42-manito-api
  description: 42 manito api server

paths:
  /auth:
    get:
      summary: verify access token
      tags:
        - Auth
      security:
        - NormalUser: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthGet'
        '401':
          description: Unauthorized
  /auth/42:
    get:
      summary: 42 OAuth2 (redirected to 42 API)
      tags:
        - Auth
      responses:
        '301':
          description: Moved Permanently (OK)
        '302':
          description: Found (OK)
        '401':
          description: Unauthorized (API verification failed)
  /auth/42/callback:
    get:
      summary: 42 OAuth2 callback (verify or create user and return token)
      tags:
        - Auth
      responses:
        '302':
          description: Redirect to front home
        '401':
          description: Unauthorized

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - NormalUser: []
      parameters:
        - in: query
          name: take
          description: take `take` Users (`min = 1, max = 100, default = 20`)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (`skip >= 0`)
          schema:
            default: 0
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersGet'
    post:
      summary: Create a new user
      tags:
        - Users
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - NormalUser: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: User not found
    patch:
      summary: Update user
      tags:
        - Users
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /users/{id}/reservations:
    get:
      summary: Get a user reservations by ID
      tags:
        - Users
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: take
          description: take `take` Users (`min = 1, max = 100, default = 20`)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (`skip >= 0`)
          schema:
            default: 0
            type: string
            format: boolean
        - in: query
          name: role
          required: false
          description: find matched role reservations (ALL is find ALL)
          schema:
            default: ALL
            enum:
              - MENTOR
              - MENTEE
              - ALL
        - in: query
          name: status
          description: find matched status reservations
          schema:
            type: array
            default: [REQUEST, ACCEPT, MENTEE_CHECKED, MENTEE_FEEDBACK, DONE, CANCEL]
            items:
              enum:
                - REQUEST
                - ACCEPT
                - MENTEE_CHECKED
                - MENTEE_FEEDBACK
                - DONE
                - CANCEL
              minItems: 1
              maxItems: 6
          style: matrix
          explode: false

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersReservationsPagination'
        '400':
          description: Invalid request parameter id
        '404':
          description: User not found

  /users/verify_nickname/{nickname}:
    get:
      summary: Verify nickname
      tags:
        - Users
      parameters:
        - name: nickname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid nickname
        '409':
          description: Nickname not found

  /mentor_profiles:
    get:
      summary: Get all mentor profiles
      tags:
        - Mentor Profiles
      security:
        - AdminUser: []
      parameters:
        - in: query
          name: take
          description: take `take` Users (min = 1, max = 100, default = 20)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (>= 0)
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: is_hide
          description: filter by is_hide
          schema:
            type: boolean
        - in: query
          name: hashtag_id
          description: filter by hashtag
          schema:
            type: integer
            format: int32
        - in: query
          name: category_id
          description: filter by category
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MentorProfilePagination'

  /mentor_profiles/{id}:
    get:
      summary: Get a mentor profile by ID
      tags:
        - Mentor Profiles
      parameters:
        - name: id
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentor profile not found
    patch:
      summary: Update mentor profile
      description: |
        update mentor profiles.  
        **NOTE**: **hashtags** and **categories** are replaced with the new ones 
        **NOTE**: 프로필 활성화 조건에 위배되는 경우 isHide가 해제됩니다.
        **사용법**: **description/shortDescription**   
          description이 **missing** **property** 인 경우, 무시(제외하고 업데이트)  
          description이 **""** 인 경우, ""로 업데이트됩니다.  
      tags:
        - Mentor Profiles
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorProfileUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /mentor_profiles/{id}/activation:
    patch:
      summary: Activate or Deactivate mentorProfiles
      description: |
        mentorProfiled을 활성화/비활성화합니다.
      tags:
        - Mentor Profiles
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorProfileActivation'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileGet'
        '400':
          description: Invalid request parameter
        '404':
          description: Mentor profile not found



  /reservations:
    get:
      summary: Get all reservations
      tags:
        - Reservations
      security:
        - AdminUser: []
      description: |
        **ROLE**\
        \
        only for `ADMIN` user
      parameters:
        - in: query
          name: take
          description: take `take` Users (min = 1, max = 100, default = 20)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (>= 0)
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: hashtag_id
          description: filter by hashtag
          schema:
            type: integer
            format: int32
        - in: query
          name: category_id
          description: filter by category
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationPagination'
    post:
      summary: Create a new reservation
      security:
        - NormalUser: []
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists (REQUEST OR ACCEPT)

  /reservations/{id}:
    get:
      summary: Get a reservation by ID
      tags:
        - Reservations
      security:
        - OwnerUser: []
      description: |
        **ROLE**\
        \
        only for `OWNER` user
      parameters:
        - name: id
          description: 'reservation id'
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Reservation not found
    patch:
      summary: Update reservation
      description: |
        **ROLE**\
        \
        only for `ADMIN` user
      tags:
        - Reservations
      security:
        - AdminUser: []
      parameters:
        - name: id
          in: path
          description: 'reservation id'
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /reservations/{id}/cancel:
    patch:
      summary: cancel reservation
      description: |
        **ROLE**\
        \
        only for `mentor` or `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          description: 'reservation id'
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelReservation'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /reservations/{id}/accept:
    patch:
      summary: accept reservation
      description: |
        **ROLE**\
        \
        only for `mentor` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          description: 'reservation id'
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /reservations/{id}/check:
    patch:
      summary: check accepted reservation by mentee
      description: |
        **ROLE**\
        \
        only for `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          description: 'reservation id'
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /reservations/{id}/mentor_completion:
    patch:
      summary: complete reservation as mentor
      description: |
        **ROLE**\
        \
        only for `mentor` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          description: 'reservation id'
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteReservationAsMentor'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /reservations/{id}/mentee_completion:
    patch:
      summary: complete reservation as mentee
      description: |
        **ROLE**\
        \
        only for `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - name: id
          in: path
          required: true
          description: 'reservation id'
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteReservationAsMentee'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /hashtags:
    get:
      summary: Get all hashtags
      tags:
        - Hashtags
      parameters:
        - in: query
          name: take
          description: take `take` Users (min = 1, max = 100, default = 20)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (>= 0)
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: profile_id
          description: filter by profile_id
          schema:
            type: integer
            format: int32
        - in: query
          name: reservation_id
          description: filter by reservation_id
          schema:
            type: integer
            format: int32
        - in: query
          name: search
          description: search by hashtag (%LIKE%)
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagPagination'
    post:
      summary: Create a new hashtag
      tags:
        - Hashtags
      security:
        - NormalUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HashtagCreate'
      responses:
        '200':
          description: Already exists but I will response you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagGet'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized

  /mentee_feedbacks:
    get:
      summary: Get all mentee feedbacks order by recent updated
      tags:
        - Mentee Feedbacks
      security:
        - AdminUser: []
      parameters:
        - in: query
          name: take
          description: take `take` Users (min = 1, max = 100, default = 20)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (>= 0)
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: mentee_id
          description: filter by mentee_id
          schema:
            type: integer
            format: int32
        - in: query
          name: mentor_id
          description: filter by mentor_id
          schema:
            type: integer
            format: int32
        - in: query
          name: reservation_id
          description: filter by reservation_id
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackPagination'

    post:
      summary: Create a new mentee feedback
      tags:
        - Mentee Feedbacks
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenteeFeedbackCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /mentee_feedbacks/{id}:
    get:
      summary: Get a mentee feedback by ID
      tags:
        - Mentee Feedbacks
      security:
        - NormalUser: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentee feedback not found

  /mentor_feedbacks:
    get:
      summary: Get all mentor feedbacks
      tags:
        - Mentor Feedbacks
      security:
        - AdminUser: []
      parameters:
        - in: query
          name: take
          description: take `take` Users (min = 1, max = 100, default = 20)
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users (>= 0)
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: mentee_id
          description: filter by mentee_id
          schema:
            type: integer
            format: int32
        - in: query
          name: mentor_id
          description: filter by mentor_id
          schema:
            type: integer
            format: int32
        - in: query
          name: reservation_id
          description: filter by reservation_id
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackPagination'
    post:
      summary: Create a new mentor feedback
      tags:
        - Mentor Feedbacks
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorFeedbackCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists

  /mentor_feedbacks/{id}:
    get:
      summary: Get a mentor feedback by ID
      tags:
        - Mentor Feedbacks
      security:
        - NormalUser: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentor feedback not found

  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryGet'

  /search/mentor/{search_string}:
    get:
      summary: Search mentor by string
      tags:
        - Search
      parameters:
        - in: path
          name: search_string
          required: true
          description: 'search mentor profiles that contains search string in nickname or hashtags'
          schema:
            type: string
        - in: query
          name: take
          description: take `take` Users `min = 1, max = 100, default = 20`
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users `take >= 0`
          schema:
            default: 0
            type: integer
            format: int32
        - in: query
          name: search_by_user_nickname
          description: search by nickname `default = true`
          schema:
            default: true
            type: string
            format: 'true | false'
        - in: query
          name: search_by_hashtag_name
          description: search by tag name `default = true`
          schema:
            default: true
            type: string
            format: 'true | false'
        - in: query
          name: search_by_category_name
          description: search by category name `default = true`
          schema:
            default: true
            type: string
            format: 'true | false'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchMentorGet'
  /home:
    get:
      summary: Get main page mentor profiles (random)
      tags:
        - Home
      parameters:
        - in: query
          name: take
          description: take `take` Users `min = 1, max = 100, default = 20`
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users `take >= 0`
          schema:
            default: 0
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchMentorGet'
        '404':
          description: Category not found

  /home/{category_id}:
    get:
      summary: Get main page mentor profiles by category
      tags:
        - Home
      description: '내부 알고리즘에 의해서 선정된 상위 프로필이 제공됩니다.'
      parameters:
        - in: query
          name: take
          description: take `take` Users `min = 1, max = 100, default = 20`
          schema:
            default: 20
            type: integer
            format: int32
        - in: query
          name: page
          description: skip `take * page` Users and take `take` Users `take >= 0`
          schema:
            default: 0
            type: integer
            format: int32
        - in: path
          name: category_id
          required: true
          description: 'category id'
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchMentorGet'
        '404':
          description: Category not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
        nickname:
          type: string
        profileImage:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        mentorProfile:
          $ref: '#/components/schemas/MentorProfile'
        menteeReservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        mentorReservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        menteeFeedbacksTo:
          type: array
          items:
            $ref: '#/components/schemas/MenteeFeedback'
        menteeFeedbacksFrom:
          type: array
          items:
            $ref: '#/components/schemas/MentorFeedback'
        mentorFeedbacksTo:
          type: array
          items:
            $ref: '#/components/schemas/MentorFeedback'
        mentorFeedbacksFrom:
          type: array
          items:
            $ref: '#/components/schemas/MenteeFeedback'
    MentorProfile:
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
        userId:
          type: integer
          format: int32
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/ProfileHashtag'
        shortDescription:
          type: string
        description:
          type: string
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        mentor:
          $ref: '#/components/schemas/User'
        mentorId:
          type: integer
          format: int32
        mentee:
          $ref: '#/components/schemas/User'
        menteeId:
          type: integer
          format: int32
        requestMessage:
          type: string
        isAccepted:
          type: boolean
        isFinished:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/ReservationHashtag'
        mentorFeedback:
          type: array
          items:
            $ref: '#/components/schemas/MentorFeedback'
        menTeeFeedback:
          type: array
          items:
            $ref: '#/components/schemas/MenteeFeedback'
        Hashtag:
          $ref: '#/components/schemas/Hashtag'
        hashtagId:
          type: integer
          format: int32
    MenteeFeedback:
      type: object
      properties:
        id:
          type: integer
          format: int32
        mentee:
          $ref: '#/components/schemas/User'
        menteeId:
          type: integer
          format: int32
        mentor:
          $ref: '#/components/schemas/User'
        mentorId:
          type: integer
          format: int32
        reservation:
          $ref: '#/components/schemas/Reservation'
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        Hashtag:
          $ref: '#/components/schemas/Hashtag'
        hashtagId:
          type: integer
          format: int32

    MentorFeedback:
      type: object
      properties:
        id:
          type: integer
          format: int32
        mentee:
          $ref: '#/components/schemas/User'
        menteeId:
          type: integer
          format: int32
        mentor:
          $ref: '#/components/schemas/User'
        mentorId:
          type: integer
          format: int32
        reservation:
          $ref: '#/components/schemas/Reservation'
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Hashtag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/MenteeFeedback'
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        ProfileHashtag:
          type: array
          items:
            $ref: '#/components/schemas/ProfileHashtag'
        ReservationHashtag:
          type: array
          items:
            $ref: '#/components/schemas/ReservationHashtag'
    ProfileHashtag:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/MentorProfile'
        profileId:
          type: integer
          format: int32
        hashtag:
          $ref: '#/components/schemas/Hashtag'
        hashtagId:
          type: integer
          format: int32
    ReservationHashtag:
      type: object
      properties:
        reservation:
          $ref: '#/components/schemas/Reservation'
        reservationId:
          type: integer
          format: int32
        hashtag:
          $ref: '#/components/schemas/Hashtag'
        hashtagId:
          type: integer
          format: int32
    # DTOs
    ## Auth
    AuthGet:
      type: object
      properties:
        id:
          type: number
          description: 'required'
        nickname:
          type: string
          description: 'required'
        profileImage:
          type: string
          description: 'required'
        role:
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
    AuthCallbackGet:
      type: object
      properties:
        uid:
          type: integer
          description: 'user id'
        accessToken:
          type: string
          description: 'required'
    ## User
    UserCreate:
      type: object
      description: 'only for admin'
      properties:
        email:
          type: string
          format: email
          description: 'required'
        nickname:
          type: string
          description: 'required'
        profileImage:
          type: string
          description: 'required'
        role:
          description: 'required'
          type: string
          format: enum
          enum:
            - ADMIN
            - USER

    UserUpdate:
      type: object
      properties:
        profileImage:
          type: string
          description: 'optional'

    UsersGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        nickname:
          type: string
        profileImage:
          type: string
        role:
          description: 'required'
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        mentorProfile:
          $ref: '#/components/schemas/MentorProfileSimpleGet'

    UsersReservationsGet:
      type: object
      properties:
        menteeReservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationGet'
        mentorReservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationGet'

    UsersReservationsPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/ReservationGet'
        page:
          $ref: '#/components/schemas/Page'

    ## MentorProfile
    MentorProfileCreate:
      type: object
      properties:
        userId:
          type: integer
          format: int32
          description: 'required, user id'

    MentorProfileGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        user:
          type: object
          properties:
            id:
              type: integer
              format: int32
            nickname:
              type: string
            profileImage:
              type: string
        socialLink:
          type: string

    MentorProfilePagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MentorProfileGet'
        page:
          $ref: '#/components/schemas/Page'

    MentorProfileSimpleGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        socialLink:
          type: string

    MentorProfileActivation:
      type: object
      properties:
        isHide:
          type: boolean

    HomeGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        user:
          $ref: '#/components/schemas/UserSimpleGet'

    UserSimpleGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nickname:
          type: string
        profileImage:
          type: string

    MentorProfileUpdate:
      type: object
      properties:
        isHide:
          type: boolean
          description: 'default false'
        shortDescription:
          type: string
          description: '0 <= len < 50'
        description:
          type: string
          description: '0 <= len < 1000'
        hashtags:
          type: array
          description: 'number of hashtag <= 5'
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
        categories:
          type: array
          description: 'optional'
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
        socialLink:
          type: string
          description: 'optional, regex https://42born2code.slack.com/team/[a-zA-Z0-9_]+'
    ## Reservation
    ReservationCreate:
      type: object
      properties:
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        categoryId:
          type: integer
          format: int32
          description: 'required, category id'
        requestMessage:
          type: string
          description: 'optional, request message `length <= 1000`'
        hashtags:
          type: array
          description: 'number of hashtag <= 5'
          items:
            $ref: '#/components/schemas/HashtagId'
      required:
        - mentorId
        - menteeId

    ReservationGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: 'reservation id'
        mentorId:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/CategoryGet'
        requestMessage:
          type: string
        status:
          type: string
          format: enum
          enum:
            - 'REQUEST'
            - 'ACCEPT'
            - 'CANCEL'
            - 'PENDING'
            - 'COMPLETE'
        mentorFeedback:
          $ref: '#/components/schemas/MentorFeedbackGet'
        menteeFeedback:
          $ref: '#/components/schemas/MenteeFeedbackGet'
        cancelReason:
          $ref: '#/components/schemas/CancelReasonGet'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'

    ReservationPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/ReservationGet'
        page:
          $ref: '#/components/schemas/Page'

    UserReservationGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: 'reservation id'
        mentorId:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        categoryId:
          type: integer
          format: int32
        status:
          type: string
          format: enum
          enum:
            - 'REQUESTED'
            - 'ACCEPTED'
            - 'FINISHED'
            - 'CANCELED'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'

    ReservationUpdate:
      type: object
      properties:
        requestMessage:
          type: string
          description: 'optional, request message'
        status:
          description: 'optional, status'
          type: string
          format: enum
          enum:
            - 'REQUESTED'
            - 'ACCEPTED'
            - 'FINISHED'
            - 'CANCELED'
        categoryId:
          type: integer
          format: int32
          description: 'optional, category id'
        hashtags:
          type: array
          description: 'optional, hashtags item max 5'
          items:
            $ref: '#/components/schemas/HashtagUpdate'

    CancelReservation:
      type: object
      properties:
        content:
          description: 'Reason for Cancellation, (length <= 100)'
          type: string

    CompleteReservationAsMentee:
      type: object
      properties:
        rating:
          type: number
          description: 'rating, 0.5 * n, (0 <= n < 10) '
        content:
          description: 'reservation feedback, (length <= 300)'
          type: string

    CompleteReservationAsMentor:
      type: object
      properties:
        rating:
          type: number
          description: 'rating, 0.5 * n, (0 <= n < 10) '

    ## Hashtag
    HashtagGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    HashtagPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/HashtagGet'
        page:
          $ref: '#/components/schemas/Page'
      example:
        content:
          - id: 0
            name: 'test1'
          - id: 1
            name: 'test2'
        page:
          take: 0
          page: 0
          totalPage: 0
          currentPage: 0
          isLast: false

    HashtagId:
      type: object
      properties:
        id:
          type: integer
          format: int32

    HashtagCreate:
      type: object
      properties:
        name:
          type: string
          description: 'required, 0 < len < 20'
      required:
        - name

    HashtagUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int32
      required:
        - id

    ## MenteeFeedback
    MenteeFeedbackGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        mentorId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MenteeFeedbackCreate:
      type: object
      properties:
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        reservationId:
          type: integer
          format: int32
          description: 'required, reservation id'
        rating:
          type: number
          format: float
          description: 'required, 0 <= rating <= 5'
        content:
          type: string
          description: 'optional, 0 < len < 1000'
      required:
        - menteeId
        - mentorId
        - reservationId
        - rating

    ## MentorFeedback
    MentorFeedbackGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        mentorId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MentorFeedbackPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MentorFeedbackGet'
        page:
          $ref: '#/components/schemas/Page'

    MenteeFeedbackPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MenteeFeedbackGet'
        page:
          $ref: '#/components/schemas/Page'

    MentorFeedbackCreate:
      type: object
      properties:
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        reservationId:
          type: integer
          format: int32
          description: 'required, reservation id'
        rating:
          type: number
          format: float
          description: 'required, 0 <= rating <= 5'
        content:
          type: string
          description: 'optional, 0 < len < 1000'
      required:
        - menteeId
        - mentorId
        - reservationId
        - rating

    CancelReasonGet:
      type: object
      properties:
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        requestedUserId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32

    ## Category
    CategoryGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    ## Search/Mentor
    SearchMentorGet:
      $ref: '#/components/schemas/HomeGet'

    Page:
      type: object
      properties:
        take:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        totalPage:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        isLast:
          type: boolean

  securitySchemes:
    NormalUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'User Role >= USER'
    OwnerUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'User Role >= ResourceOwner'
    AdminUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'User Role >= ADMIN'
