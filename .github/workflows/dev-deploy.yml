# Dependency Install, Build, Start를 여기서 다합니다.

name: Dev Deploy to AWS

on:
#  pull_request:
#    branches:
#      - develop
#    types: [review_requested]
   push:
     branches:
       - develop

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    permissions:
      id-token: write
      contents: write

    name: Deploy Application
    runs-on: ubuntu-latest
    outputs:
      deploymentId: ${{ steps.create-deployment.outputs.deploymendId }}
    environment: development


    steps:
      # 레포지토리로 이동합니다.
      - name: Checkout
        uses: actions/checkout@v3

        # 환경변수를 설치합니다.
      - name: Install Secret
        env:
          # github repository 안의 ENV_PROD 환경변수 사용
          ENV_DEV: ${{ secrets.ENV_DEV }}
        run: |
          echo "$ENV_DEV"  >> .env

        # nodejs환경기반
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.16.1'

      - name: install Dependency
        run: npm i

      - name: build server
        run: npm run build

      #sonarQube관련 처리 여기서 해야할수도.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

        #Code Deploy를 사용해 S3 bucket에 소스코드 업로드
      - name: S3 업로드
        run: aws deploy push --application-name 42manito-development-cd --description "upload test server file in s3" --s3-location s3://manito42-code-deploy-bucket-test/server.zip --source .

      - name: Create CodeDeploy Deployment
        id: create-deployment
        run: |
          id=$(aws deploy create-deployment \
          --application-name 42manito-development-cd \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --output text --deployment-group-name 42manito-development-deployment-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=manito42-code-deploy-bucket-test,bundleType=zip,key=server.zip)
          echo "deploymentId=$id" >> $GITHUB_OUTPUT

      - name: Wait for deployment to finish
        run: |
          echo ${{ steps.create-deployment.outputs.deploymentId }}
          aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment.outputs.deploymentId }}
