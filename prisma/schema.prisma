// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// users model
model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique @db.VarChar(255)
  nickname            String           @unique @db.VarChar(128)
  profileImage        String           @map("profile_image") @db.Text
  isMentor            Boolean          @map("is_mentor") @db.TinyInt
  createdAt           DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt           DateTime?        @updatedAt @map("updated_at") @db.Timestamp(0)
  mentorProfile       MentorProfile?
  menteeReservations  Reservation[]    @relation("ReservedAsMentee")
  mentorReservations  Reservation[]    @relation("BeReservedAsMentor")
  menteeFeedbacksTo   MenteeFeedback[] @relation("MenteeFeedbackTo")
  menteeFeedbacksFrom MentorFeedback[] @relation("MentorFeedbackFrom")
  mentorFeedbacksTo   MentorFeedback[] @relation("MentorFeedbackTo")
  mentorFeedbacksFrom MenteeFeedback[] @relation("MenteeFeedbackFrom")

  @@map("users")
}

// mentor_profiles model
model MentorProfile {
  id       Int              @id @default(autoincrement())
  user     User             @relation(fields: [userId], references: [id])
  userId   Int              @unique @map("user_id")
  hashtags ProfileHashtag[]

  @@map("mentor_profiles")
}

// reservations model
model Reservation {
  id             Int                  @id @default(autoincrement())
  mentor         User                 @relation("BeReservedAsMentor", fields: [mentorId], references: [id])
  mentorId       Int                  @map("mentor_id")
  mentee         User                 @relation("ReservedAsMentee", fields: [menteeId], references: [id])
  menteeId       Int                  @map("mentee_id")
  requestMessage String?              @map("request_message") @db.Text
  isAccepted     Boolean              @default(false) @map("is_accepted") @db.TinyInt
  isConnected    Boolean              @default(false) @map("is_connected") @db.TinyInt
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime?            @updatedAt @map("updated_at") @db.Timestamp(0)
  hashtags       ReservationHashtag[]
  mentorFeedback MentorFeedback[]
  menTeeFeedback MenteeFeedback[]
  Hashtag        Hashtag?             @relation(fields: [hashtagId], references: [id])
  hashtagId      Int?

  @@map("reservations")
}

// mentee_feedbacks model
model MenteeFeedback {
  id            Int         @id @default(autoincrement())
  mentee        User        @relation("MenteeFeedbackTo", fields: [menteeId], references: [id])
  menteeId      Int         @map("mentee_id")
  mentor        User        @relation("MenteeFeedbackFrom", fields: [mentorId], references: [id])
  mentorId      Int         @map("mentor_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @map("reservation_id")
  rating        Float       @default(0.0) @db.Float
  content       String?     @db.Text
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime?   @updatedAt @map("updated_at") @db.Timestamp(0)
  Hashtag       Hashtag?    @relation(fields: [hashtagId], references: [id])
  hashtagId     Int?

  @@map("mentee_feedbacks")
}

// mentor_feedbacks model
model MentorFeedback {
  id            Int         @id @default(autoincrement())
  mentee        User        @relation("MentorFeedbackFrom", fields: [menteeId], references: [id])
  menteeId      Int         @map("mentee_id")
  mentor        User        @relation("MentorFeedbackTo", fields: [mentorId], references: [id])
  mentorId      Int         @map("mentor_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @map("reservation_id")
  rating        Float       @default(0.0) @db.Float
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime?   @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("mentor_feedbacks")
}

// hashtags model
model Hashtag {
  id                 Int                  @id @default(autoincrement())
  tagName            String               @unique @map("tag_name") @db.VarChar(255)
  profiles           MenteeFeedback[]
  reservations       Reservation[]
  ProfileHashtag     ProfileHashtag[]
  ReservationHashtag ReservationHashtag[]

  @@map("hashtags")
}

// profile_hashtags model
model ProfileHashtag {
  profile   MentorProfile @relation(fields: [profileId], references: [id])
  profileId Int           @map("profile_id")
  hashtag   Hashtag       @relation(fields: [hashtagId], references: [id])
  hashtagId Int           @map("hashtag_id")

  @@id([profileId, hashtagId])
  @@map("profile_hashtags")
}

// profile_hashtags model
model ReservationHashtag {
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @map("reservation_id")
  hashtag       Hashtag     @relation(fields: [hashtagId], references: [id])
  hashtagId     Int         @map("hashtag_id")

  @@id([reservationId, hashtagId])
  @@map("reservation_hashtags")
}
